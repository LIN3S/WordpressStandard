// This file is part of the WordPress Standard project.
//
// Copyright (c) 2015-present LIN3S <info@lin3s.com>
//
// For the full copyright and license information, please view the LICENSE
// file that was distributed with this source code.
//
// @author Gorka Laucirica <gorka@lin3s.com>

@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

$small-breakpoint: 640 !default;
$medium-breakpoint: 1024 !default;
$large-breakpoint: 1279 !default;
$xlarge-breakpoint: 1440 !default;

$small-range: (0, $small-breakpoint) !default;
$medium-range: ($small-breakpoint  + 1, $medium-breakpoint) !default;
$large-range: ($medium-breakpoint + 1, $large-breakpoint) !default;
$xlarge-range: ($large-breakpoint  + 1, $xlarge-breakpoint) !default;
$xxlarge-range: ($xlarge-breakpoint + 1, 99999999) !default;

$screen: 'only screen';

$landscape: '#{$screen} and (orientation: landscape)' !default;
$portrait: '#{$screen} and (orientation: portrait)' !default;

@function media-query-by-range($range, $type: 'up') {
  @if ($type == 'up' & & lower-bound($range) != 0) {
    @return '#{$screen} and (min-width:#{lower-bound($range)}px)';
  } @else if ($type == 'only') {
    @return '#{$screen} and (min-width:#{lower-bound($range)}px) and (max-width:#{upper-bound($range)}px)';
  } @else {
    @warn 'Type #{$type} not supported';
  }
}

$small-up: $screen;
$small-only: media-query-by-range($small-range, 'only');

$medium-up: media-query-by-range($medium-range);
$medium-only: media-query-by-range($medium-range, 'only');

$large-up: media-query-by-range($large-range);
$large-only: media-query-by-range($large-range, 'only');

$xlarge-up: media-query-by-range($xlarge-range);
$xlarge-only: media-query-by-range($xlarge-range, 'only');

$xxlarge-up: media-query-by-range($xxlarge-range);
$xxlarge-only: media-query-by-range($xxlarge-range, 'only');

$column-count: 12 !default;
$column-gutter: 30px !default;
$row-padding: 15px !default;

$fluid-row-width: 1290 !default;

$adaptive-row-small-width: 666 !default;
$adaptive-row-medium-width: 666 !default;
$adaptive-row-large-width: 930 !default;
$adaptive-row-xlarge-width: 1170 !default;
$adaptive-row-xxlarge-width: $fluid-row-width;

$grid: (
        'adaptive': (
                        ($small-range, $adaptive-row-small-width),
                        ($medium-range, $adaptive-row-medium-width),
                        ($large-range, $adaptive-row-large-width),
                        ($xlarge-range, $adaptive-row-xlarge-width),
                        ($xxlarge-range, $adaptive-row-xxlarge-width)
        )
) !default;

%grid__row {
  display: flex;
  flex-wrap: wrap;
  margin-left: auto;
  margin-right: auto;
}

%grid__row--fluid {
  @extend %grid__row;
  max-width: $fluid-row-width + $column-gutter;
}

%grid__row--fluid-one-column {
  @extend %grid__row--fluid;
  padding: 0 $column-gutter;
}

%grid__column {
  padding-left: #{$column-gutter / 2};
  padding-right: #{$column-gutter / 2};
}

@mixin grid__row($selector, $grid-type: 'fluid') {
  @if ($grid-type == 'fluid') {
    #{$selector} {
      @extend %grid__row;
      @extend %grid__row--fluid;
    }
  } @else {
    @if (map-has-key($grid, $grid-type)) {
      #{$selector} {
        @extend %grid__row;
      }
      @each $option in map_get($grid, $grid-type) {
        @media #{media-query-by-range(nth($option,1))} {
          #{$selector} {
            max-width: nth($option, 2) + $column-gutter;
          }
        }
      ;
      }
    } @else {
      @warn '#{$grid-type} not found in $grid map, check _grid-settings.scss';
    }
  }
}

@mixin grid__column($columns) {
  flex: 1 1 #{100% / $column-count * $columns};
  max-width: #{100% / $column-count * $columns};
  padding: 0 #{$column-gutter / 2};
  width: 100%;
}

@mixin grid__column--push($columns, $column-count: 12) {
  margin-left: calc(#{100% / $column-count * $columns});
}
